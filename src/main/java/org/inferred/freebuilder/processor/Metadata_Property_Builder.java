// Autogenerated code. Do not modify.
package org.inferred.freebuilder.processor;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.annotation.Generated;
import javax.annotation.Nullable;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import org.inferred.freebuilder.processor.Metadata;
import org.inferred.freebuilder.processor.PropertyCodeGenerator;

/**
 * Auto-generated superclass of {@link Metadata.Property.Builder},
 * derived from the API of {@link Metadata.Property}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class Metadata_Property_Builder {

  private static final Joiner COMMA_JOINER = Joiner.on(", ").skipNulls();

  private enum Property {
    ALL_CAPS_NAME("allCapsName"),
    CAPITALIZED_NAME("capitalizedName"),
    GETTER_NAME("getterName"),
    NAME("name"),
    TYPE("type"),
    FULLY_CHECKED_CAST("fullyCheckedCast"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override public String toString() {
      return name;
    }
  }

  private String allCapsName;
  @Nullable private TypeMirror boxedType = null;
  private String capitalizedName;
  @Nullable private PropertyCodeGenerator codeGenerator = null;
  private String getterName;
  private String name;
  private LinkedHashSet<TypeElement> nullableAnnotations = new LinkedHashSet<TypeElement>();
  private TypeMirror type;
  private boolean fullyCheckedCast;
  private final EnumSet<Metadata_Property_Builder.Property> _unsetProperties =
      EnumSet.allOf(Metadata_Property_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link Metadata.Property#getAllCapsName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code allCapsName} is null
   */
  public Metadata.Property.Builder setAllCapsName(String allCapsName) {
    this.allCapsName = Preconditions.checkNotNull(allCapsName);
    _unsetProperties.remove(Metadata_Property_Builder.Property.ALL_CAPS_NAME);
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getAllCapsName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getAllCapsName() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Property_Builder.Property.ALL_CAPS_NAME),
        "allCapsName not set");
    return allCapsName;
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#getBoxedType()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Property.Builder setBoxedType(@Nullable TypeMirror boxedType) {
    this.boxedType = boxedType;
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getBoxedType()}.
   */
  @Nullable
  public TypeMirror getBoxedType() {
    return boxedType;
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#getCapitalizedName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code capitalizedName} is null
   */
  public Metadata.Property.Builder setCapitalizedName(String capitalizedName) {
    this.capitalizedName = Preconditions.checkNotNull(capitalizedName);
    _unsetProperties.remove(Metadata_Property_Builder.Property.CAPITALIZED_NAME);
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getCapitalizedName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getCapitalizedName() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Property_Builder.Property.CAPITALIZED_NAME),
        "capitalizedName not set");
    return capitalizedName;
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#getCodeGenerator()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Property.Builder setCodeGenerator(@Nullable PropertyCodeGenerator codeGenerator) {
    this.codeGenerator = codeGenerator;
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getCodeGenerator()}.
   */
  @Nullable
  public PropertyCodeGenerator getCodeGenerator() {
    return codeGenerator;
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#getGetterName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code getterName} is null
   */
  public Metadata.Property.Builder setGetterName(String getterName) {
    this.getterName = Preconditions.checkNotNull(getterName);
    _unsetProperties.remove(Metadata_Property_Builder.Property.GETTER_NAME);
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getGetterName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getGetterName() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Property_Builder.Property.GETTER_NAME),
        "getterName not set");
    return getterName;
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#getName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code name} is null
   */
  public Metadata.Property.Builder setName(String name) {
    this.name = Preconditions.checkNotNull(name);
    _unsetProperties.remove(Metadata_Property_Builder.Property.NAME);
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getName()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String getName() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Property_Builder.Property.NAME),
        "name not set");
    return name;
  }

  /**
   * Adds {@code element} to the set to be returned from {@link Metadata.Property#getNullableAnnotations()}.
   * If the set already contains {@code element}, then {@code addNullableAnnotations}
   * has no effect (only the previously added element is retained).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public Metadata.Property.Builder addNullableAnnotations(TypeElement element) {
    this.nullableAnnotations.add(Preconditions.checkNotNull(element));
    return (Metadata.Property.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the set to be returned from
   * {@link Metadata.Property#getNullableAnnotations()}, ignoring duplicate elements
   * (only the first duplicate element is added).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public Metadata.Property.Builder addNullableAnnotations(TypeElement... elements) {
    for (TypeElement element : elements) {
      addNullableAnnotations(element);
    }
    return (Metadata.Property.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the set to be returned from
   * {@link Metadata.Property#getNullableAnnotations()}, ignoring duplicate elements
   * (only the first duplicate element is added).
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a
   *     null element
   */
  public Metadata.Property.Builder addAllNullableAnnotations(Iterable<? extends TypeElement> elements) {
    for (TypeElement element : elements) {
      addNullableAnnotations(element);
    }
    return (Metadata.Property.Builder) this;
  }

  /**
   * Clears the set to be returned from {@link Metadata.Property#getNullableAnnotations()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Property.Builder clearNullableAnnotations() {
    this.nullableAnnotations.clear();
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the set that will be returned by
   * {@link Metadata.Property#getNullableAnnotations()}.
   * Changes to this builder will be reflected in the view.
   */
  public Set<TypeElement> getNullableAnnotations() {
    return Collections.unmodifiableSet(nullableAnnotations);
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#getType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code type} is null
   */
  public Metadata.Property.Builder setType(TypeMirror type) {
    this.type = Preconditions.checkNotNull(type);
    _unsetProperties.remove(Metadata_Property_Builder.Property.TYPE);
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#getType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public TypeMirror getType() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Property_Builder.Property.TYPE),
        "type not set");
    return type;
  }

  /**
   * Sets the value to be returned by {@link Metadata.Property#isFullyCheckedCast()}.
   *
   * @return this {@code Builder} object
   */
  public Metadata.Property.Builder setFullyCheckedCast(boolean fullyCheckedCast) {
    this.fullyCheckedCast = fullyCheckedCast;
    _unsetProperties.remove(Metadata_Property_Builder.Property.FULLY_CHECKED_CAST);
    return (Metadata.Property.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link Metadata.Property#isFullyCheckedCast()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public boolean isFullyCheckedCast() {
    Preconditions.checkState(
        !_unsetProperties.contains(Metadata_Property_Builder.Property.FULLY_CHECKED_CAST),
        "fullyCheckedCast not set");
    return fullyCheckedCast;
  }

  private static final class Value implements Metadata.Property {
    private final String allCapsName;
    @Nullable private final TypeMirror boxedType;
    private final String capitalizedName;
    @Nullable private final PropertyCodeGenerator codeGenerator;
    private final String getterName;
    private final String name;
    private final ImmutableSet<TypeElement> nullableAnnotations;
    private final TypeMirror type;
    private final boolean fullyCheckedCast;

    private Value(Metadata_Property_Builder builder) {
      this.allCapsName = builder.allCapsName;
      this.boxedType = builder.boxedType;
      this.capitalizedName = builder.capitalizedName;
      this.codeGenerator = builder.codeGenerator;
      this.getterName = builder.getterName;
      this.name = builder.name;
      this.nullableAnnotations = ImmutableSet.copyOf(builder.nullableAnnotations);
      this.type = builder.type;
      this.fullyCheckedCast = builder.fullyCheckedCast;
    }

    @Override
    public String getAllCapsName() {
      return allCapsName;
    }

    @Override
    @Nullable
    public TypeMirror getBoxedType() {
      return boxedType;
    }

    @Override
    public String getCapitalizedName() {
      return capitalizedName;
    }

    @Override
    @Nullable
    public PropertyCodeGenerator getCodeGenerator() {
      return codeGenerator;
    }

    @Override
    public String getGetterName() {
      return getterName;
    }

    @Override
    public String getName() {
      return name;
    }

    @Override
    public ImmutableSet<TypeElement> getNullableAnnotations() {
      return nullableAnnotations;
    }

    @Override
    public TypeMirror getType() {
      return type;
    }

    @Override
    public boolean isFullyCheckedCast() {
      return fullyCheckedCast;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Metadata_Property_Builder.Value)) {
        return false;
      }
      Metadata_Property_Builder.Value other = (Metadata_Property_Builder.Value) obj;
      if (!allCapsName.equals(other.allCapsName)) {
        return false;
      }
      if (boxedType != other.boxedType
          && (boxedType == null || !boxedType.equals(other.boxedType))) {
        return false;
      }
      if (!capitalizedName.equals(other.capitalizedName)) {
        return false;
      }
      if (codeGenerator != other.codeGenerator
          && (codeGenerator == null || !codeGenerator.equals(other.codeGenerator))) {
        return false;
      }
      if (!getterName.equals(other.getterName)) {
        return false;
      }
      if (!name.equals(other.name)) {
        return false;
      }
      if (!nullableAnnotations.equals(other.nullableAnnotations)) {
        return false;
      }
      if (!type.equals(other.type)) {
        return false;
      }
      if (fullyCheckedCast != other.fullyCheckedCast) {
        return false;
      }
      return true;
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] { allCapsName, boxedType, capitalizedName, codeGenerator, getterName, name, nullableAnnotations, type, fullyCheckedCast });
    }

    @Override
    public String toString() {
      return "Property{"
          + COMMA_JOINER.join(
              "allCapsName=" + allCapsName,
              (boxedType != null ? "boxedType=" + boxedType : null),
              "capitalizedName=" + capitalizedName,
              (codeGenerator != null ? "codeGenerator=" + codeGenerator : null),
              "getterName=" + getterName,
              "name=" + name,
              "nullableAnnotations=" + nullableAnnotations,
              "type=" + type,
              "fullyCheckedCast=" + fullyCheckedCast)
          + "}";
    }
  }

  /**
   * Returns a newly-created {@link Metadata.Property} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public Metadata.Property build() {
    Preconditions.checkState(_unsetProperties.isEmpty(), "Not set: %s", _unsetProperties);
    return new Metadata_Property_Builder.Value(this);
  }

  /**
   * Sets all property values using the given {@code Metadata.Property} as a template.
   */
  public Metadata.Property.Builder mergeFrom(Metadata.Property value) {
    setAllCapsName(value.getAllCapsName());
    setBoxedType(value.getBoxedType());
    setCapitalizedName(value.getCapitalizedName());
    setCodeGenerator(value.getCodeGenerator());
    setGetterName(value.getGetterName());
    setName(value.getName());
    addAllNullableAnnotations(value.getNullableAnnotations());
    setType(value.getType());
    setFullyCheckedCast(value.isFullyCheckedCast());
    return (Metadata.Property.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}.
   * Does not affect any properties not set on the input.
   */
  public Metadata.Property.Builder mergeFrom(Metadata.Property.Builder template) {
    // Upcast to access the private _unsetProperties field.
    // Otherwise, oddly, we get an access violation.
    EnumSet<Metadata_Property_Builder.Property> _templateUnset = ((Metadata_Property_Builder) template)._unsetProperties;
    if (!_templateUnset.contains(Metadata_Property_Builder.Property.ALL_CAPS_NAME)) {
      setAllCapsName(template.getAllCapsName());
    }
    setBoxedType(template.getBoxedType());
    if (!_templateUnset.contains(Metadata_Property_Builder.Property.CAPITALIZED_NAME)) {
      setCapitalizedName(template.getCapitalizedName());
    }
    setCodeGenerator(template.getCodeGenerator());
    if (!_templateUnset.contains(Metadata_Property_Builder.Property.GETTER_NAME)) {
      setGetterName(template.getGetterName());
    }
    if (!_templateUnset.contains(Metadata_Property_Builder.Property.NAME)) {
      setName(template.getName());
    }
    addAllNullableAnnotations(((Metadata_Property_Builder) template).nullableAnnotations);
    if (!_templateUnset.contains(Metadata_Property_Builder.Property.TYPE)) {
      setType(template.getType());
    }
    if (!_templateUnset.contains(Metadata_Property_Builder.Property.FULLY_CHECKED_CAST)) {
      setFullyCheckedCast(template.isFullyCheckedCast());
    }
    return (Metadata.Property.Builder) this;
  }

  /**
   * Resets the state of this builder.
   */
  public Metadata.Property.Builder clear() {
    Metadata_Property_Builder _template = new Metadata.Property.Builder();
    allCapsName = _template.allCapsName;
    boxedType = _template.boxedType;
    capitalizedName = _template.capitalizedName;
    codeGenerator = _template.codeGenerator;
    getterName = _template.getterName;
    name = _template.name;
    nullableAnnotations.clear();
    type = _template.type;
    fullyCheckedCast = _template.fullyCheckedCast;
    _unsetProperties.clear();
    _unsetProperties.addAll(_template._unsetProperties);
    return (Metadata.Property.Builder) this;
  }

  private static final class Partial implements Metadata.Property {
    private final String allCapsName;
    @Nullable private final TypeMirror boxedType;
    private final String capitalizedName;
    @Nullable private final PropertyCodeGenerator codeGenerator;
    private final String getterName;
    private final String name;
    private final ImmutableSet<TypeElement> nullableAnnotations;
    private final TypeMirror type;
    private final boolean fullyCheckedCast;
    private final EnumSet<Metadata_Property_Builder.Property> _unsetProperties;

    Partial(Metadata_Property_Builder builder) {
      this.allCapsName = builder.allCapsName;
      this.boxedType = builder.boxedType;
      this.capitalizedName = builder.capitalizedName;
      this.codeGenerator = builder.codeGenerator;
      this.getterName = builder.getterName;
      this.name = builder.name;
      this.nullableAnnotations = ImmutableSet.copyOf(builder.nullableAnnotations);
      this.type = builder.type;
      this.fullyCheckedCast = builder.fullyCheckedCast;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String getAllCapsName() {
      if (_unsetProperties.contains(Metadata_Property_Builder.Property.ALL_CAPS_NAME)) {
        throw new UnsupportedOperationException("allCapsName not set");
      }
      return allCapsName;
    }

    @Override
    @Nullable
    public TypeMirror getBoxedType() {
      return boxedType;
    }

    @Override
    public String getCapitalizedName() {
      if (_unsetProperties.contains(Metadata_Property_Builder.Property.CAPITALIZED_NAME)) {
        throw new UnsupportedOperationException("capitalizedName not set");
      }
      return capitalizedName;
    }

    @Override
    @Nullable
    public PropertyCodeGenerator getCodeGenerator() {
      return codeGenerator;
    }

    @Override
    public String getGetterName() {
      if (_unsetProperties.contains(Metadata_Property_Builder.Property.GETTER_NAME)) {
        throw new UnsupportedOperationException("getterName not set");
      }
      return getterName;
    }

    @Override
    public String getName() {
      if (_unsetProperties.contains(Metadata_Property_Builder.Property.NAME)) {
        throw new UnsupportedOperationException("name not set");
      }
      return name;
    }

    @Override
    public ImmutableSet<TypeElement> getNullableAnnotations() {
      return nullableAnnotations;
    }

    @Override
    public TypeMirror getType() {
      if (_unsetProperties.contains(Metadata_Property_Builder.Property.TYPE)) {
        throw new UnsupportedOperationException("type not set");
      }
      return type;
    }

    @Override
    public boolean isFullyCheckedCast() {
      if (_unsetProperties.contains(Metadata_Property_Builder.Property.FULLY_CHECKED_CAST)) {
        throw new UnsupportedOperationException("fullyCheckedCast not set");
      }
      return fullyCheckedCast;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Metadata_Property_Builder.Partial)) {
        return false;
      }
      Metadata_Property_Builder.Partial other = (Metadata_Property_Builder.Partial) obj;
      if (allCapsName != other.allCapsName
          && (allCapsName == null || !allCapsName.equals(other.allCapsName))) {
        return false;
      }
      if (boxedType != other.boxedType
          && (boxedType == null || !boxedType.equals(other.boxedType))) {
        return false;
      }
      if (capitalizedName != other.capitalizedName
          && (capitalizedName == null || !capitalizedName.equals(other.capitalizedName))) {
        return false;
      }
      if (codeGenerator != other.codeGenerator
          && (codeGenerator == null || !codeGenerator.equals(other.codeGenerator))) {
        return false;
      }
      if (getterName != other.getterName
          && (getterName == null || !getterName.equals(other.getterName))) {
        return false;
      }
      if (name != other.name
          && (name == null || !name.equals(other.name))) {
        return false;
      }
      if (!nullableAnnotations.equals(other.nullableAnnotations)) {
        return false;
      }
      if (type != other.type
          && (type == null || !type.equals(other.type))) {
        return false;
      }
      if (fullyCheckedCast != other.fullyCheckedCast) {
        return false;
      }
      return _unsetProperties.equals(other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Arrays.hashCode(new Object[] { allCapsName, boxedType, capitalizedName, codeGenerator, getterName, name, nullableAnnotations, type, fullyCheckedCast, _unsetProperties });
    }

    @Override
    public String toString() {
      return "partial Property{"
          + COMMA_JOINER.join(
              (!_unsetProperties.contains(Metadata_Property_Builder.Property.ALL_CAPS_NAME)
                  ? "allCapsName=" + allCapsName : null),
              (boxedType != null ? "boxedType=" + boxedType : null),
              (!_unsetProperties.contains(Metadata_Property_Builder.Property.CAPITALIZED_NAME)
                  ? "capitalizedName=" + capitalizedName : null),
              (codeGenerator != null ? "codeGenerator=" + codeGenerator : null),
              (!_unsetProperties.contains(Metadata_Property_Builder.Property.GETTER_NAME)
                  ? "getterName=" + getterName : null),
              (!_unsetProperties.contains(Metadata_Property_Builder.Property.NAME)
                  ? "name=" + name : null),
              "nullableAnnotations=" + nullableAnnotations,
              (!_unsetProperties.contains(Metadata_Property_Builder.Property.TYPE)
                  ? "type=" + type : null),
              (!_unsetProperties.contains(Metadata_Property_Builder.Property.FULLY_CHECKED_CAST)
                  ? "fullyCheckedCast=" + fullyCheckedCast : null))
          + "}";
    }
  }

  /**
   * Returns a newly-created partial {@link Metadata.Property}
   * based on the contents of the {@code Builder}.
   * State checking will not be performed.
   * Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests.
   */
  @VisibleForTesting()
  public Metadata.Property buildPartial() {
    return new Metadata_Property_Builder.Partial(this);
  }
}
